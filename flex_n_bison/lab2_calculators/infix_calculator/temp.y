/* temp.y - this program solves mathematical problems */
/* how to run? type: bison -d -rall test.y -where "-d" generates report, and "-rall" Reports All*/

%{
#include <stdio.h>
#include <math.h>
void yyerror(const char *);
extern int yylex(void); /* it is defined externally, so bison will call this function that will be generated by flex, if its not defined either here, or either after rules, then compilation will fail, this function generates TOKENS  */
%}

%error-verbose /* gives more descriptive errors */
%token INT SQRT
%left '+' '-'
%left '*' '/'
%left '^' SQRT /* presidences, having highest line number, is strongest, so, '^' is stronger than '*'; '*' is stronger than '+' */
%right NEG
%%

prog	:	
	| prog line
;

line	: '\n'
	| exp '\n'	{printf(": %d\n", $1);}
	| error '\n'	{yyerrok;}
;

exp	: INT 			{$$ = $1;} /* order here does not matter */
	| exp '+' exp 		{$$ = $1 + $3;}
	| exp '-' exp 		{$$ = $1 - $3;}
	| exp '/' exp 		{$$ = $1 / $3;}
	| exp '*' exp 		{$$ = $1 * $3;}
	| exp '^' exp 		{$$ = pow($1,$3);}
	| SQRT exp		{$$ = sqrt($2);}
	| '(' exp ')'		{$$ = $2;}
	| '-' exp %prec NEG	{$$ = -$2;} /* inline defines what is the level of precedence */
;

%%

void yyerror (const char *s){
	printf ("error %s\n", s);
}

int main (void){
	yyparse();
}
